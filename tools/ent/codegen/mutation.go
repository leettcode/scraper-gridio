// Code generated by entc, DO NOT EDIT.

package codegen

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/alexgtn/go-linkshort/tools/ent/codegen/nordpooldayahead"
	"github.com/alexgtn/go-linkshort/tools/ent/codegen/predicate"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeNordPoolDayAhead = "NordPoolDayAhead"
)

// NordPoolDayAheadMutation represents an operation that mutates the NordPoolDayAhead nodes in the graph.
type NordPoolDayAheadMutation struct {
	config
	op            Op
	typ           string
	id            *int
	date          *string
	value         *float64
	addvalue      *float64
	region        *string
	created_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*NordPoolDayAhead, error)
	predicates    []predicate.NordPoolDayAhead
}

var _ ent.Mutation = (*NordPoolDayAheadMutation)(nil)

// nordpooldayaheadOption allows management of the mutation configuration using functional options.
type nordpooldayaheadOption func(*NordPoolDayAheadMutation)

// newNordPoolDayAheadMutation creates new mutation for the NordPoolDayAhead entity.
func newNordPoolDayAheadMutation(c config, op Op, opts ...nordpooldayaheadOption) *NordPoolDayAheadMutation {
	m := &NordPoolDayAheadMutation{
		config:        c,
		op:            op,
		typ:           TypeNordPoolDayAhead,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNordPoolDayAheadID sets the ID field of the mutation.
func withNordPoolDayAheadID(id int) nordpooldayaheadOption {
	return func(m *NordPoolDayAheadMutation) {
		var (
			err   error
			once  sync.Once
			value *NordPoolDayAhead
		)
		m.oldValue = func(ctx context.Context) (*NordPoolDayAhead, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().NordPoolDayAhead.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNordPoolDayAhead sets the old NordPoolDayAhead of the mutation.
func withNordPoolDayAhead(node *NordPoolDayAhead) nordpooldayaheadOption {
	return func(m *NordPoolDayAheadMutation) {
		m.oldValue = func(context.Context) (*NordPoolDayAhead, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NordPoolDayAheadMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NordPoolDayAheadMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("codegen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NordPoolDayAheadMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NordPoolDayAheadMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().NordPoolDayAhead.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDate sets the "date" field.
func (m *NordPoolDayAheadMutation) SetDate(s string) {
	m.date = &s
}

// Date returns the value of the "date" field in the mutation.
func (m *NordPoolDayAheadMutation) Date() (r string, exists bool) {
	v := m.date
	if v == nil {
		return
	}
	return *v, true
}

// OldDate returns the old "date" field's value of the NordPoolDayAhead entity.
// If the NordPoolDayAhead object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NordPoolDayAheadMutation) OldDate(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDate: %w", err)
	}
	return oldValue.Date, nil
}

// ResetDate resets all changes to the "date" field.
func (m *NordPoolDayAheadMutation) ResetDate() {
	m.date = nil
}

// SetValue sets the "value" field.
func (m *NordPoolDayAheadMutation) SetValue(f float64) {
	m.value = &f
	m.addvalue = nil
}

// Value returns the value of the "value" field in the mutation.
func (m *NordPoolDayAheadMutation) Value() (r float64, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the NordPoolDayAhead entity.
// If the NordPoolDayAhead object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NordPoolDayAheadMutation) OldValue(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// AddValue adds f to the "value" field.
func (m *NordPoolDayAheadMutation) AddValue(f float64) {
	if m.addvalue != nil {
		*m.addvalue += f
	} else {
		m.addvalue = &f
	}
}

// AddedValue returns the value that was added to the "value" field in this mutation.
func (m *NordPoolDayAheadMutation) AddedValue() (r float64, exists bool) {
	v := m.addvalue
	if v == nil {
		return
	}
	return *v, true
}

// ResetValue resets all changes to the "value" field.
func (m *NordPoolDayAheadMutation) ResetValue() {
	m.value = nil
	m.addvalue = nil
}

// SetRegion sets the "region" field.
func (m *NordPoolDayAheadMutation) SetRegion(s string) {
	m.region = &s
}

// Region returns the value of the "region" field in the mutation.
func (m *NordPoolDayAheadMutation) Region() (r string, exists bool) {
	v := m.region
	if v == nil {
		return
	}
	return *v, true
}

// OldRegion returns the old "region" field's value of the NordPoolDayAhead entity.
// If the NordPoolDayAhead object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NordPoolDayAheadMutation) OldRegion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRegion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRegion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRegion: %w", err)
	}
	return oldValue.Region, nil
}

// ResetRegion resets all changes to the "region" field.
func (m *NordPoolDayAheadMutation) ResetRegion() {
	m.region = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *NordPoolDayAheadMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *NordPoolDayAheadMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the NordPoolDayAhead entity.
// If the NordPoolDayAhead object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NordPoolDayAheadMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *NordPoolDayAheadMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the NordPoolDayAheadMutation builder.
func (m *NordPoolDayAheadMutation) Where(ps ...predicate.NordPoolDayAhead) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *NordPoolDayAheadMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (NordPoolDayAhead).
func (m *NordPoolDayAheadMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NordPoolDayAheadMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.date != nil {
		fields = append(fields, nordpooldayahead.FieldDate)
	}
	if m.value != nil {
		fields = append(fields, nordpooldayahead.FieldValue)
	}
	if m.region != nil {
		fields = append(fields, nordpooldayahead.FieldRegion)
	}
	if m.created_at != nil {
		fields = append(fields, nordpooldayahead.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NordPoolDayAheadMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case nordpooldayahead.FieldDate:
		return m.Date()
	case nordpooldayahead.FieldValue:
		return m.Value()
	case nordpooldayahead.FieldRegion:
		return m.Region()
	case nordpooldayahead.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NordPoolDayAheadMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case nordpooldayahead.FieldDate:
		return m.OldDate(ctx)
	case nordpooldayahead.FieldValue:
		return m.OldValue(ctx)
	case nordpooldayahead.FieldRegion:
		return m.OldRegion(ctx)
	case nordpooldayahead.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown NordPoolDayAhead field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NordPoolDayAheadMutation) SetField(name string, value ent.Value) error {
	switch name {
	case nordpooldayahead.FieldDate:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDate(v)
		return nil
	case nordpooldayahead.FieldValue:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	case nordpooldayahead.FieldRegion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRegion(v)
		return nil
	case nordpooldayahead.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown NordPoolDayAhead field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NordPoolDayAheadMutation) AddedFields() []string {
	var fields []string
	if m.addvalue != nil {
		fields = append(fields, nordpooldayahead.FieldValue)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NordPoolDayAheadMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case nordpooldayahead.FieldValue:
		return m.AddedValue()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NordPoolDayAheadMutation) AddField(name string, value ent.Value) error {
	switch name {
	case nordpooldayahead.FieldValue:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddValue(v)
		return nil
	}
	return fmt.Errorf("unknown NordPoolDayAhead numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NordPoolDayAheadMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NordPoolDayAheadMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NordPoolDayAheadMutation) ClearField(name string) error {
	return fmt.Errorf("unknown NordPoolDayAhead nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NordPoolDayAheadMutation) ResetField(name string) error {
	switch name {
	case nordpooldayahead.FieldDate:
		m.ResetDate()
		return nil
	case nordpooldayahead.FieldValue:
		m.ResetValue()
		return nil
	case nordpooldayahead.FieldRegion:
		m.ResetRegion()
		return nil
	case nordpooldayahead.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown NordPoolDayAhead field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NordPoolDayAheadMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NordPoolDayAheadMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NordPoolDayAheadMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NordPoolDayAheadMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NordPoolDayAheadMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NordPoolDayAheadMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NordPoolDayAheadMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown NordPoolDayAhead unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NordPoolDayAheadMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown NordPoolDayAhead edge %s", name)
}
