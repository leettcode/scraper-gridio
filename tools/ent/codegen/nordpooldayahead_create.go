// Code generated by entc, DO NOT EDIT.

package codegen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/alexgtn/go-linkshort/tools/ent/codegen/nordpooldayahead"
)

// NordPoolDayAheadCreate is the builder for creating a NordPoolDayAhead entity.
type NordPoolDayAheadCreate struct {
	config
	mutation *NordPoolDayAheadMutation
	hooks    []Hook
}

// SetDate sets the "date" field.
func (npdac *NordPoolDayAheadCreate) SetDate(s string) *NordPoolDayAheadCreate {
	npdac.mutation.SetDate(s)
	return npdac
}

// SetValue sets the "value" field.
func (npdac *NordPoolDayAheadCreate) SetValue(f float64) *NordPoolDayAheadCreate {
	npdac.mutation.SetValue(f)
	return npdac
}

// SetRegion sets the "region" field.
func (npdac *NordPoolDayAheadCreate) SetRegion(s string) *NordPoolDayAheadCreate {
	npdac.mutation.SetRegion(s)
	return npdac
}

// SetCreatedAt sets the "created_at" field.
func (npdac *NordPoolDayAheadCreate) SetCreatedAt(t time.Time) *NordPoolDayAheadCreate {
	npdac.mutation.SetCreatedAt(t)
	return npdac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (npdac *NordPoolDayAheadCreate) SetNillableCreatedAt(t *time.Time) *NordPoolDayAheadCreate {
	if t != nil {
		npdac.SetCreatedAt(*t)
	}
	return npdac
}

// Mutation returns the NordPoolDayAheadMutation object of the builder.
func (npdac *NordPoolDayAheadCreate) Mutation() *NordPoolDayAheadMutation {
	return npdac.mutation
}

// Save creates the NordPoolDayAhead in the database.
func (npdac *NordPoolDayAheadCreate) Save(ctx context.Context) (*NordPoolDayAhead, error) {
	var (
		err  error
		node *NordPoolDayAhead
	)
	npdac.defaults()
	if len(npdac.hooks) == 0 {
		if err = npdac.check(); err != nil {
			return nil, err
		}
		node, err = npdac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NordPoolDayAheadMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = npdac.check(); err != nil {
				return nil, err
			}
			npdac.mutation = mutation
			if node, err = npdac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(npdac.hooks) - 1; i >= 0; i-- {
			if npdac.hooks[i] == nil {
				return nil, fmt.Errorf("codegen: uninitialized hook (forgotten import codegen/runtime?)")
			}
			mut = npdac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, npdac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (npdac *NordPoolDayAheadCreate) SaveX(ctx context.Context) *NordPoolDayAhead {
	v, err := npdac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (npdac *NordPoolDayAheadCreate) Exec(ctx context.Context) error {
	_, err := npdac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (npdac *NordPoolDayAheadCreate) ExecX(ctx context.Context) {
	if err := npdac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (npdac *NordPoolDayAheadCreate) defaults() {
	if _, ok := npdac.mutation.CreatedAt(); !ok {
		v := nordpooldayahead.DefaultCreatedAt()
		npdac.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (npdac *NordPoolDayAheadCreate) check() error {
	if _, ok := npdac.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`codegen: missing required field "NordPoolDayAhead.date"`)}
	}
	if v, ok := npdac.mutation.Date(); ok {
		if err := nordpooldayahead.DateValidator(v); err != nil {
			return &ValidationError{Name: "date", err: fmt.Errorf(`codegen: validator failed for field "NordPoolDayAhead.date": %w`, err)}
		}
	}
	if _, ok := npdac.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`codegen: missing required field "NordPoolDayAhead.value"`)}
	}
	if v, ok := npdac.mutation.Value(); ok {
		if err := nordpooldayahead.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`codegen: validator failed for field "NordPoolDayAhead.value": %w`, err)}
		}
	}
	if _, ok := npdac.mutation.Region(); !ok {
		return &ValidationError{Name: "region", err: errors.New(`codegen: missing required field "NordPoolDayAhead.region"`)}
	}
	if v, ok := npdac.mutation.Region(); ok {
		if err := nordpooldayahead.RegionValidator(v); err != nil {
			return &ValidationError{Name: "region", err: fmt.Errorf(`codegen: validator failed for field "NordPoolDayAhead.region": %w`, err)}
		}
	}
	if _, ok := npdac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`codegen: missing required field "NordPoolDayAhead.created_at"`)}
	}
	return nil
}

func (npdac *NordPoolDayAheadCreate) sqlSave(ctx context.Context) (*NordPoolDayAhead, error) {
	_node, _spec := npdac.createSpec()
	if err := sqlgraph.CreateNode(ctx, npdac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (npdac *NordPoolDayAheadCreate) createSpec() (*NordPoolDayAhead, *sqlgraph.CreateSpec) {
	var (
		_node = &NordPoolDayAhead{config: npdac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: nordpooldayahead.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: nordpooldayahead.FieldID,
			},
		}
	)
	if value, ok := npdac.mutation.Date(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nordpooldayahead.FieldDate,
		})
		_node.Date = value
	}
	if value, ok := npdac.mutation.Value(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: nordpooldayahead.FieldValue,
		})
		_node.Value = value
	}
	if value, ok := npdac.mutation.Region(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nordpooldayahead.FieldRegion,
		})
		_node.Region = value
	}
	if value, ok := npdac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: nordpooldayahead.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	return _node, _spec
}

// NordPoolDayAheadCreateBulk is the builder for creating many NordPoolDayAhead entities in bulk.
type NordPoolDayAheadCreateBulk struct {
	config
	builders []*NordPoolDayAheadCreate
}

// Save creates the NordPoolDayAhead entities in the database.
func (npdacb *NordPoolDayAheadCreateBulk) Save(ctx context.Context) ([]*NordPoolDayAhead, error) {
	specs := make([]*sqlgraph.CreateSpec, len(npdacb.builders))
	nodes := make([]*NordPoolDayAhead, len(npdacb.builders))
	mutators := make([]Mutator, len(npdacb.builders))
	for i := range npdacb.builders {
		func(i int, root context.Context) {
			builder := npdacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NordPoolDayAheadMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, npdacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, npdacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, npdacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (npdacb *NordPoolDayAheadCreateBulk) SaveX(ctx context.Context) []*NordPoolDayAhead {
	v, err := npdacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (npdacb *NordPoolDayAheadCreateBulk) Exec(ctx context.Context) error {
	_, err := npdacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (npdacb *NordPoolDayAheadCreateBulk) ExecX(ctx context.Context) {
	if err := npdacb.Exec(ctx); err != nil {
		panic(err)
	}
}
