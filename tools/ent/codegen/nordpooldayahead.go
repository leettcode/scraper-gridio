// Code generated by entc, DO NOT EDIT.

package codegen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/alexgtn/go-linkshort/tools/ent/codegen/nordpooldayahead"
)

// NordPoolDayAhead is the model entity for the NordPoolDayAhead schema.
type NordPoolDayAhead struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Date holds the value of the "date" field.
	Date string `json:"date,omitempty"`
	// Value holds the value of the "value" field.
	Value float64 `json:"value,omitempty"`
	// Region holds the value of the "region" field.
	Region string `json:"region,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NordPoolDayAhead) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case nordpooldayahead.FieldValue:
			values[i] = new(sql.NullFloat64)
		case nordpooldayahead.FieldID:
			values[i] = new(sql.NullInt64)
		case nordpooldayahead.FieldDate, nordpooldayahead.FieldRegion:
			values[i] = new(sql.NullString)
		case nordpooldayahead.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type NordPoolDayAhead", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NordPoolDayAhead fields.
func (npda *NordPoolDayAhead) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case nordpooldayahead.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			npda.ID = int(value.Int64)
		case nordpooldayahead.FieldDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				npda.Date = value.String
			}
		case nordpooldayahead.FieldValue:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				npda.Value = value.Float64
			}
		case nordpooldayahead.FieldRegion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field region", values[i])
			} else if value.Valid {
				npda.Region = value.String
			}
		case nordpooldayahead.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				npda.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this NordPoolDayAhead.
// Note that you need to call NordPoolDayAhead.Unwrap() before calling this method if this NordPoolDayAhead
// was returned from a transaction, and the transaction was committed or rolled back.
func (npda *NordPoolDayAhead) Update() *NordPoolDayAheadUpdateOne {
	return (&NordPoolDayAheadClient{config: npda.config}).UpdateOne(npda)
}

// Unwrap unwraps the NordPoolDayAhead entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (npda *NordPoolDayAhead) Unwrap() *NordPoolDayAhead {
	tx, ok := npda.config.driver.(*txDriver)
	if !ok {
		panic("codegen: NordPoolDayAhead is not a transactional entity")
	}
	npda.config.driver = tx.drv
	return npda
}

// String implements the fmt.Stringer.
func (npda *NordPoolDayAhead) String() string {
	var builder strings.Builder
	builder.WriteString("NordPoolDayAhead(")
	builder.WriteString(fmt.Sprintf("id=%v", npda.ID))
	builder.WriteString(", date=")
	builder.WriteString(npda.Date)
	builder.WriteString(", value=")
	builder.WriteString(fmt.Sprintf("%v", npda.Value))
	builder.WriteString(", region=")
	builder.WriteString(npda.Region)
	builder.WriteString(", created_at=")
	builder.WriteString(npda.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NordPoolDayAheads is a parsable slice of NordPoolDayAhead.
type NordPoolDayAheads []*NordPoolDayAhead

func (npda NordPoolDayAheads) config(cfg config) {
	for _i := range npda {
		npda[_i].config = cfg
	}
}
